/*
 *  This program developed in Java is based on the netbeans platform and is used
 *  to design and to analyse composite structures by means of analytical and 
 *  numerical methods.
 * 
 *  Further information can be found here:
 *  http://www.elamx.de
 *    
 *  Copyright (C) 2021 Technische Universität Dresden - Andreas Hauffe
 * 
 *  This file is part of eLamX².
 *
 *  eLamX² is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  eLamX² is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with eLamX².  If not, see <http://www.gnu.org/licenses/>.
 */
package de.elamx.laminatfailurebody;

import com.ardor3d.renderer.state.BlendState;
import com.ardor3d.renderer.state.MaterialState;
import com.ardor3d.scenegraph.Mesh;
import com.ardor3d.scenegraph.MeshData;
import de.elamx.core.GlobalProperties;
import de.elamx.core.RawDataExportService;
import de.elamx.core.SnapshotService;
import de.elamx.laminate.Laminat;
import de.elamx.laminate.Layer;
import de.elamx.laminate.Material;
import de.elamx.laminate.eLamXLookup;
import de.elamx.utilities.AutoRowHeightTable;
import de.view3d.View3D;
import de.view3d.View3DProperties;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.font.TextAttribute;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.FloatBuffer;
import java.text.AttributedString;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.util.RequestProcessor;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;

@TopComponent.Description(
        preferredID = "LamFailView3DTopComponent",
        iconBase="de/elamx/laminatfailurebody/resources/laminatversagenskoerper.png"
)
public final class LamFailView3DTopComponent extends TopComponent implements PropertyChangeListener {

    public final static Set<Laminat> uniqueLaminates = new HashSet<Laminat>();
    private final Laminat laminate;
    private final AttributedString captionX = new AttributedString("nx");
    private final AttributedString captionY = new AttributedString("ny");
    private final AttributedString captionZ = new AttributedString("nxy");
    private final LaminateTableModel model = new LaminateTableModel();
    private boolean showMessages = true;

    public LamFailView3DTopComponent(Laminat laminate) {
        this.laminate = laminate;
        this.laminate.addPropertyChangeListener(this);
        captionX.addAttribute(TextAttribute.SUPERSCRIPT, TextAttribute.SUPERSCRIPT_SUB, 1, 2);
        captionY.addAttribute(TextAttribute.SUPERSCRIPT, TextAttribute.SUPERSCRIPT_SUB, 1, 2);
        captionZ.addAttribute(TextAttribute.SUPERSCRIPT, TextAttribute.SUPERSCRIPT_SUB, 1, 3);
        initComponents();
        setName(NbBundle.getMessage(LamFailView3DTopComponent.class, "CTL_CLT_LamFailView3DTopComponent", laminate.getName()));
        setToolTipText(NbBundle.getMessage(LamFailView3DTopComponent.class, "HINT_CLT_LamFailView3DTopComponent"));
        View3DProperties.getDefault().addPropertyChangeListener(this);
        associateLookup(Lookups.fixed(laminate, new Snapshot(), new VTKExport()));
        eLamXLookup.getDefault().addPropertyChangeListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        controlPanel = new javax.swing.JPanel();
        inputPanel = new javax.swing.JPanel();
        firstPlyRButton = new javax.swing.JRadioButton();
        lastPlyRButton = new javax.swing.JRadioButton();
        drawButton = new javax.swing.JButton();
        resultPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new AutoRowHeightTable();
        jTable1.setDefaultRenderer(Color.class, new ColorRenderer(true));
        view3D = new View3D(captionX, captionY, captionZ, true);

        setLayout(new java.awt.BorderLayout());

        inputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(LamFailView3DTopComponent.class, "InputPanel.Titel"))); // NOI18N

        buttonGroup1.add(firstPlyRButton);
        firstPlyRButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(firstPlyRButton, org.openide.util.NbBundle.getMessage(LamFailView3DTopComponent.class, "LamFailView3DTopComponent.firstPlyRButton.text")); // NOI18N

        buttonGroup1.add(lastPlyRButton);
        org.openide.awt.Mnemonics.setLocalizedText(lastPlyRButton, org.openide.util.NbBundle.getMessage(LamFailView3DTopComponent.class, "LamFailView3DTopComponent.lastPlyRButton.text")); // NOI18N

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lastPlyRButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(firstPlyRButton, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE))
                .addContainerGap())
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(firstPlyRButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lastPlyRButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(drawButton, org.openide.util.NbBundle.getMessage(LamFailView3DTopComponent.class, "LamFailView3DTopComponent.drawButton.text")); // NOI18N
        drawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawButtonActionPerformed(evt);
            }
        });

        resultPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(LamFailView3DTopComponent.class, "ResultPanel.legend.caption"))); // NOI18N

        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 275));

        jTable1.setModel(model);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout resultPanelLayout = new javax.swing.GroupLayout(resultPanel);
        resultPanel.setLayout(resultPanelLayout);
        resultPanelLayout.setHorizontalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(resultPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        resultPanelLayout.setVerticalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 183, Short.MAX_VALUE)
            .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(resultPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(inputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(drawButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(resultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drawButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(controlPanel, java.awt.BorderLayout.LINE_END);
        add(view3D, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void drawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawButtonActionPerformed
        updateView();
    }//GEN-LAST:event_drawButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JButton drawButton;
    private javax.swing.JRadioButton firstPlyRButton;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JRadioButton lastPlyRButton;
    private javax.swing.JPanel resultPanel;
    private de.view3d.View3D view3D;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        eLamXLookup.getDefault().removePropertyChangeListener(this);
        laminate.removePropertyChangeListener(this);
        View3DProperties.getDefault().removePropertyChangeListener(this);
        uniqueLaminates.remove(laminate);
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private List<Mesh> shapes;
    private double scalFac = -1.0;

    private void updateView() {
        if (!checkLaminate()) {
            return;
        }
        drawButton.setEnabled(false);
        final ProgressHandle ph = ProgressHandle.createSystemHandle(NbBundle.getMessage(LamFailView3DTopComponent.class, "Task.drawFailureBody"), null);
        RequestProcessor.getDefault().post(new Runnable() {
            @Override
            public void run() {
                ph.start();
                final ArrayList<Color> layerColor = new ArrayList<>();
                double layerNum = laminate.getNumberofLayers();
                for (int ii = 0; ii < layerNum; ii++) {
                    layerColor.add(getRainbowColor(ii / layerNum));
                }
                int numOfElements = (int) (View3DProperties.getDefault().getNetQuality() * 200);
                PlyFailureCriterion pfc = new PlyFailureCriterion(laminate, 
                        layerColor, 
                        firstPlyRButton.isSelected() ? PlyFailureCriterion.FIRST_PLY_FAILURE : PlyFailureCriterion.FINAL_FAILURE, 
                        numOfElements);
                PlyFailureCriterion.FailureSurfaceResult result = pfc.getCriterion();
                Mesh shape = result.getFailureBody();
                if (shape != null){
                    setAppearance(shape); 
                    final ArrayList<Mesh> shapes = new ArrayList<>(1);
                    LamFailView3DTopComponent.this.shapes = shapes;
                    shapes.add(shape);
                    scalFac = result.getScaleFactor();
                }else{
                    LamFailView3DTopComponent.this.shapes = null;
                    scalFac = -1.0;
                }
                EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        view3D.setShape3D(shapes, 1.0/scalFac);
                        model.setLaminate(laminate, layerColor);
                        drawButton.setEnabled(true);
                        ph.finish();
                    }
                });
            }
        });
    }

    private boolean checkLaminate() {
        if (laminate.getNumberofLayers() == 0){
            DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message(NbBundle.getMessage(LamFailView3DTopComponent.class, "Warning.nolaminate"), NotifyDescriptor.WARNING_MESSAGE));
            return false;
        }
        for (Layer l : laminate.getLayers()) {
            Material m = l.getMaterial();
            if (!(m.getRParTen() > 0.0
                    && m.getRParCom() > 0.0
                    && m.getRNorTen() > 0.0
                    && m.getRNorCom() > 0.0
                    && m.getRShear() > 0.0)) {
                if (showMessages) {
                    DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message(NbBundle.getMessage(LamFailView3DTopComponent.class, "Warning.zeroStrengthMaterial", m.getName()), NotifyDescriptor.ERROR_MESSAGE));
                }
                return false;
            }
        }
        return true;
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals(Laminat.PROP_NAME)) {
            setName(NbBundle.getMessage(LamFailView3DTopComponent.class, "CTL_CLT_LamFailView3DTopComponent", laminate.getName()));
        } else if (evt.getPropertyName().equals(View3DProperties.PROP_NETQUALITY)) {
            showMessages = false;
            updateView();
            showMessages = true;
        } else if (evt.getPropertyName().equals(eLamXLookup.PROP_FILEOBJECT)){
            EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    LamFailView3DTopComponent.this.close();
                }
            });
        }
    }

    private Color getRainbowColor(double value) {
        int r = 0;
        int g = 255;
        int b = 0;

        if (value < 0.25) {
            r = 255;
        } else if (value <= 0.5 && value >= 0.25) {
            r = (int) (255.0 - 255.0 * (value - 0.25) / 0.25);
        }

        if (value <= 0.25) {
            g = (int) (255.0 * value / 0.25);
        } else if (value >= 0.75) {
            g = (int) (255.0 - 255.0 * (value - 0.75) / 0.25);
        }

        if (value > 0.75) {
            b = 255;
        } else if (value >= 0.5 && value <= 0.75) {
            b = (int) (255.0 * (value - 0.5) / 0.25);
        }

        return new Color(r, g, b);
    }

    public static void setAppearance(Mesh mesh) {
        // Add a material state
        final MaterialState ms = new MaterialState();
        mesh.setRenderState(ms);
        // Pull diffuse color for front from mesh color
        ms.setColorMaterial(MaterialState.ColorMaterial.Diffuse);
        ms.setColorMaterialFace(MaterialState.MaterialFace.FrontAndBack);
        // Set shininess for front and back
        ms.setShininess(MaterialState.MaterialFace.FrontAndBack, 100);

        BlendState blend = new BlendState();
        blend.setBlendEnabled(true);
        mesh.setRenderState(blend);
    }

    private class Snapshot implements SnapshotService {

        @Override
        public void saveSnapshot(File file) {
            view3D.saveScreenshot(file, "png");
        }
    }
    
    private class VTKExport implements RawDataExportService {
        @Override
        public void export(FileWriter fw) {
            try {
                view3D.exportQuadArrays(fw);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }

        @Override
        public String getFileExtension() {
            return "vtk";
        }
    }

    private class RawDataExport implements RawDataExportService {

        @Override
        public void export(FileWriter fw) {
            if (shapes == null || shapes.isEmpty()) {
                return;
            }
            try {
                String ls = System.getProperty("line.separator");
                DecimalFormat df_stress = GlobalProperties.getDefault().getFormat(GlobalProperties.FORMAT_STRESS);
                float[] coords = new float[3];
                for (Mesh s : shapes) {
                    MeshData data = s.getMeshData();
                    FloatBuffer buffer = data.getVertexBuffer();
                    fw.write("n_x" + "\t"
                            + "n_y" + "\t"
                            + "n_xy" + ls);
                    buffer.rewind();
                    for (int ii = 0; ii < data.getVertexCount(); ii++) {
                        buffer.get(coords, 0, 3);
                        fw.write(df_stress.format(coords[0]) + "\t"
                               + df_stress.format(coords[1]) + "\t"
                               + df_stress.format(coords[2]) + ls);
                    }
                    fw.write("----------------------------" + ls);
                }
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }

        @Override
        public String getFileExtension() {
            return "txt";
        }
    }

}
