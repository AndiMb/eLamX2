/*
 *  This program developed in Java is based on the netbeans platform and is used
 *  to design and to analyse composite structures by means of analytical and 
 *  numerical methods.
 * 
 *  Further information can be found here:
 *  http://www.elamx.de
 *    
 *  Copyright (C) 2021 Technische Universität Dresden - Andreas Hauffe
 * 
 *  This file is part of eLamX².
 *
 *  eLamX² is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  eLamX² is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with eLamX².  If not, see <http://www.gnu.org/licenses/>.
 */
package de.elamx.clt.springinui;

import de.elamx.clt.CLTRefreshListener;
import de.elamx.clt.CLT_Laminate;
import de.elamx.clt.springin.SpringInResult;
import de.elamx.core.GlobalProperties;
import de.elamx.core.RawDataExportService;
import de.elamx.core.SnapshotService;
import de.elamx.laminate.Laminat;
import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.HashSet;
import java.util.Set;
import org.jfree.XYPlotI;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartTheme;
import org.jfree.chart.ChartUtils;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.util.Args;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.eLamXChartPanel;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@TopComponent.Description(
        preferredID = "CLT_SpringInTopComponent",
        iconBase = "de/elamx/clt/springinui/resources/springin.png"
)
public final class CLT_SpringInTopComponent extends TopComponent implements LookupListener, CLTRefreshListener, PropertyChangeListener {

    public final static Set<SpringInModuleData> uniqueSpringInData = new HashSet<SpringInModuleData>();
    private final SpringInModuleData data;
    private final CLT_Laminate clt_lam;
    private final Lookup.Result<SpringInModuleData> result;
    
    private static final ChartTheme currentTheme = new StandardChartTheme("JFree");
    
    private JFreeChart chart;
    private ChartPanel chartPanel;
    private XYSeriesCollection dataset;

    public CLT_SpringInTopComponent(SpringInModuleData data) {
        this.data = data;
        setName(this.data.getName() + " - " + this.data.getLaminat().getName());
        setToolTipText(NbBundle.getMessage(CLT_SpringInTopComponent.class, "HINT_CLT_SpringInTopComponent"));
        associateLookup(Lookups.fixed(data, data.getLaminat(), new CutoutSnapshot(), new RawDataExport()));
        data.getLaminat().addPropertyChangeListener(this);
        CLT_Laminate tClt_lam = data.getLaminat().getLookup().lookup(CLT_Laminate.class);
        if (tClt_lam == null) {
            clt_lam = new CLT_Laminate(data.getLaminat());
        } else {
            clt_lam = tClt_lam;
        }
        clt_lam.addCLTRefreshListener(this);
        initChart();
        initComponents();

        result = data.getLaminat().getLookup().lookupResult(SpringInModuleData.class);
        result.addLookupListener(this);
        data.getSpringInInput().addPropertyChangeListener(this);
        data.addPropertyChangeListener(this);
        refreshed();

        initChartPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        controlPanel = new ControlPanel(data, chart);

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(controlPanel);

        add(jScrollPane1, java.awt.BorderLayout.LINE_END);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.elamx.clt.springinui.ControlPanel controlPanel;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        clt_lam.removeCLTRefreshListener(this);
        data.getLaminat().removePropertyChangeListener(this);
        result.removeLookupListener(this);
        data.getSpringInInput().removePropertyChangeListener(this);
        data.removePropertyChangeListener(this);
        controlPanel.cleanup();
        uniqueSpringInData.remove(data);
        cleanup();
    }

    @Override
    protected void componentShowing() {
        //view3D.setVisible(true);
        super.componentShowing();
    }

    @Override
    protected void componentHidden() {
        //view3D.setVisible(false);
        super.componentHidden();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        if (!result.allInstances().contains(data)) {
            this.close();
        }
    }

    @Override
    public void refreshed() {
    }
    
    private void cleanup(){
        chartPanel.removeAll();
        chart = null;
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getSource() instanceof Laminat && evt.getPropertyName().equals(Laminat.PROP_NAME)
                || evt.getSource() instanceof SpringInModuleData && evt.getPropertyName().equals(SpringInModuleData.PROP_NAME)) {
            setName(this.data.getName() + " - " + this.data.getLaminat().getName());
        }
    }
    
    private void initChart() {
        dataset = new XYSeriesCollection();
        
        chart = createSquaredXYLineChart(
                "",                                                             // chart title
                "xAxis",                                                        // x axis label
                "yAxis",                                                        // y axis label
                dataset,                                                        // data
                PlotOrientation.VERTICAL,
                true,                                                           // include legend
                true,                                                           // tooltips
                true                                                            // urls
        );
        
        // ChartTheme wird in ResultPanel gesetzt.
        
        chart.getXYPlot().clearRangeAxes();
        chart.getXYPlot().clearDomainAxes();
    }
    
    private void initChartPanel() {

        chartPanel = new eLamXChartPanel(chart);

        this.add(chartPanel, BorderLayout.CENTER);
    }
    
    /**
     * Creates a line chart (based on an {@link XYDataset}) with default
     * settings.
     *
     * @param title  the chart title (<code>null</code> permitted).
     * @param xAxisLabel  a label for the X-axis (<code>null</code> permitted).
     * @param yAxisLabel  a label for the Y-axis (<code>null</code> permitted).
     * @param dataset  the dataset for the chart (<code>null</code> permitted).
     * @param orientation  the plot orientation (horizontal or vertical)
     *                     (<code>null</code> NOT permitted).
     * @param legend  a flag specifying whether or not a legend is required.
     * @param tooltips  configure chart to generate tool tips?
     * @param urls  configure chart to generate URLs?
     *
     * @return The chart.
     */
    public static JFreeChart createSquaredXYLineChart(String title, String xAxisLabel,
            String yAxisLabel, XYDataset dataset, PlotOrientation orientation,
            boolean legend, boolean tooltips, boolean urls) {

        Args.nullNotPermitted(orientation, "orientation");
        NumberAxis xAxis = new NumberAxis(xAxisLabel);
        xAxis.setAutoRangeIncludesZero(false);        
        NumberAxis yAxis = new NumberAxis(yAxisLabel);
        XYItemRenderer renderer = new XYLineAndShapeRenderer(true, false);
        XYPlotI plot = new XYPlotI(dataset, xAxis, yAxis, renderer);
        plot.setOrientation(orientation);
        
        if (tooltips) {renderer.setDefaultToolTipGenerator(new StandardXYToolTipGenerator());}
        if (urls)     {renderer.setURLGenerator(new StandardXYURLGenerator());}

        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,plot, legend);
        currentTheme.apply(chart);
        return chart;

    }
    
    private class CutoutSnapshot implements SnapshotService {

        @Override
        public void saveSnapshot(File file) {
            try {
                ChartUtils.saveChartAsJPEG(file, chart, chartPanel.getSize().width, chartPanel.getSize().height);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }

    private class RawDataExport implements RawDataExportService {

        @Override
        public void export(FileWriter fw) {
            SpringInResult result = data.getResult();
            if (result == null){
                return;
            }
            
            try {
                fw.write("");
                
                DecimalFormat df_coord = GlobalProperties.getDefault().getFormat(GlobalProperties.FORMAT_STRAIN);
                DecimalFormat df_angle = GlobalProperties.getDefault().getFormat(GlobalProperties.FORMAT_ANGLE);
                
                String ls = System.getProperty("line.separator");
                
                fw.write("delta Angle:");
                fw.write(ls);
                fw.write("" + df_angle.format(result.getDeltaAngle()));
                fw.write(ls);
                fw.write("new Angle:");
                fw.write(ls);
                fw.write("" + df_angle.format(result.getInput().getAngle() + result.getDeltaAngle()));
                fw.write(ls);
                fw.write("");
                fw.write(ls);
                
                // write undeformed Geometry
                fw.write("True scaled undeformed geometry");
                fw.write(ls);
                fw.write("x" + "\t" + "y");
                fw.write(ls);
                double[][] geo = GlobalSpringInProperties.getInstance().getGeoCalc().getUndeformedGeometry(result, data.getLaminat());
                for (double[] geo1 : geo) {
                    fw.write(df_coord.format(geo1[0]) + "\t" + df_coord.format(geo1[1]));
                    fw.write(ls);
                }
                
                // write data over angle
                fw.write(ls);
                fw.write("--------------------------------------------------------------------------------");
                fw.write(ls);
                
                // write deformed Geometry
                fw.write("True scaled deformed geometry");
                fw.write(ls);
                fw.write("x" + "\t" + "y");
                fw.write(ls);
                geo = GlobalSpringInProperties.getInstance().getGeoCalc().getDeformedGeometry(result, data.getLaminat());
                for (double[] geo1 : geo) {
                    fw.write(df_coord.format(geo1[0]) + "\t" + df_coord.format(geo1[1]));
                    fw.write(ls);
                }
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }

        @Override
        public String getFileExtension() {
            return "txt";
        }
    }
}
