<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See harness/README in the NetBeans platform -->
<!-- for some information on what you could do (e.g. targets to override). -->
<!-- If you delete this file and reopen the project it will be recreated. -->
<project name="eLamX2" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">
    <description>Builds the module suite eLamX.</description>
    <import file="nbproject/build-impl.xml"/>
    
    <condition property="isWindows">
        <os family="windows" />
    </condition>

    <target name="build-launchers" depends="suite.build-launchers">
        <!-- Replace the icon for the Windows launcher exe. -->
        <antcall target="replaceWindowsLauncherIcon"/>
    </target>

    <!-- Windows-only target that replaces the icon for the launcher exe with our own icon. -->
    <target name="replaceWindowsLauncherIcon" if="isWindows" description="Replace the icon for the Windows launcher exe">
        <echo message="Replacing icon of Windows launcher executable."/>
        <tstamp>
            <format property="builddate" pattern="yyyyMMdd"/>
        </tstamp>
        <delete file="build/launcher/bin/${app.name}.exe"/>
        <exec executable="Resource/rcedit-x64.exe" resolveexecutable="true">
            <arg line='build/launcher/bin/${app.name}64.exe --set-icon "Resource/${app.name}.ico" --set-file-version "1.0.0" --set-product-version "${elamxversion} - ${builddate}" --set-version-string "ProductName" "${app.name}" --set-version-string "LegalCopyright" "GPL - 2025 Technische Universität Dresden - Andreas Hauffe"'/>
        </exec>
    </target>
    
    <target name="build" depends="build_view3d,suite.build">
    </target>
    
    <target name="build_view3d">
        <ant antfile="View3DSuite/build.xml" inheritall="false" target="build"/>
    </target>
    
    <target name="clean" depends="suite.clean,clean_view3d">
    </target>
    
    <target name="clean_view3d">
        <ant antfile="View3DSuite/build.xml" inheritall="false" target="clean"/>
    </target>
    
    <target name="windows-installer" depends="-windows-installer-init,-build-zip-with_jre">
        
        <!-- Temporären Ordner anlegen -->
        <tempfile property="temp.dir.windows-installer" destdir="${suite.build.dir}" deleteonexit="true" prefix="windows-installer"/>
        
        <!-- zuvor erstellte ZIP-Datei mit JRE wieder in den zurvor angelegten Pfad entpacken -->
        <unzip src="${dist.dir}/${app.name}_${elamxjdk.os}.zip" dest="${temp.dir.windows-installer}" />
        
        <!-- InnoSetup Kontrolldatei in den Ordner kopieren -->
        <copy file="Resource/elamx.iss" tofile="${temp.dir.windows-installer}/elamx.iss"/>
        
        <!-- eLamX²-Version in der InnoSetup Kontrolldatei setzen -->
        <replace file="${temp.dir.windows-installer}/elamx.iss"
                 value="${elamxversion}">
            <contains text="$ELAMXVERSION$"/>
            <replacetoken><![CDATA[$ELAMXVERSION$]]></replacetoken>
        </replace>
        
        <!-- Icon-Datei in den Ordner kopieren -->
        <copy file="Resource/elamx.ico" tofile="${temp.dir.windows-installer}/elamx/etc/elamx.ico"/>
        
        <!-- Lizenzdatei in den Ordner kopieren -->
        <copy file="LICENSE" tofile="${temp.dir.windows-installer}/license.txt"/>
        
        <!-- Installer mit InnoSetup erstellen -->
        <exec dir="${temp.dir.windows-installer}" executable="${innosetupexe}">
            <arg value="elamx.iss" />
        </exec>
        
        <!-- Installer in den Dist-Ordner kopieren -->
        <move file="${temp.dir.windows-installer}/Output/eLamX.${elamxversion}.exe" tofile="${dist.dir}/eLamX.${elamxversion}.exe"/>
    </target>
    
    <!-- Hilfstarget, um die windows.properties zu laden -->
    <target name="-windows-installer-init">
        <property file="nbproject/windows.properties"/>
    </target>
    
    <target name="linux-appimage" depends="-linux-appimage-init,-build-zip-with_jre">
        
        <!-- Temporären Ordner für die App-Struktur anlegen -->
        <tempfile property="temp.dir.linux-appimage" destdir="${suite.build.dir}" deleteonexit="true" prefix="linux-appimage"/>
        
        <!-- App-Struktur anlegen -->
        <property name="linux-appimage-folder" location="${temp.dir.linux-appimage}/${app.name}.AppDir"/>
        <property name="linux-appimage-folder.usr" location="${linux-appimage-folder}/usr"/>
        <property name="linux-appimage-folder.usr.bin" location="${linux-appimage-folder.usr}/bin"/>
        <property name="linux-appimage-folder.usr.lib" location="${linux-appimage-folder.usr}/lib"/>
        <property name="linux-appimage-folder.usr.share" location="${linux-appimage-folder.usr}/share"/>
        <property name="linux-appimage-folder.usr.share.icon" location="${linux-appimage-folder.usr.share}/icons/hicolor/48x48/apps/"/>
        <property name="linux-appimage-folder.usr.share.applications" location="${linux-appimage-folder.usr.share}/applications/"/>
        
        <mkdir dir="${linux-appimage-folder}" />
        <mkdir dir="${linux-appimage-folder.usr}" />
        <mkdir dir="${linux-appimage-folder.usr.bin}" />
        <mkdir dir="${linux-appimage-folder.usr.lib}" />
        <mkdir dir="${linux-appimage-folder.usr.share}" />
        <mkdir dir="${linux-appimage-folder.usr.share.icon}" />
        <mkdir dir="${linux-appimage-folder.usr.share.applications}" />
        
        <!-- notwendige Dateien in die Ordnerstruktur kopieren (Icon, Desptop-File) -->
        <copy file="Resource/logo_elamx48.png" tofile="${linux-appimage-folder.usr.share.icon}/${app.name}.png"/>
        <symlink link="${linux-appimage-folder}/${app.name}.png" resource="usr/share/icons/hicolor/48x48/apps/${app.name}.png"/>
        <copy file="Resource/Linux.AppImage/elamx.desktop" tofile="${linux-appimage-folder.usr.share.applications}/${app.name}.desktop"/>
        <symlink link="${linux-appimage-folder}/${app.name}.desktop" resource="usr/share/applications/${app.name}.desktop"/>
        <copy file="Resource/Linux.AppImage/AppRun" tofile="${linux-appimage-folder}/AppRun"/>
        <chmod file="${linux-appimage-folder}/AppRun" perm="a+x"/>
        
        <!-- zuvor erstellte ZIP-Datei mit JRE wieder in den zurvor angelegten Pfad entpacken -->
        <unzip src="${dist.dir}/${app.name}_${elamxjdk.os}.zip" dest="${linux-appimage-folder.usr.lib}" />
        <!-- JRE an die richtige Stelle kopieren -->
        <move file="${linux-appimage-folder.usr.lib}/${app.name}/${elamxjdk.dir}" tofile="${linux-appimage-folder.usr.lib}/${elamxjdk.dir}"/>
        <chmod file="${linux-appimage-folder.usr.lib}/${elamxjdk.dir}/bin/*" perm="a+x"/>
        
        <!-- Link auf Startdatei unter /usr/bin/ erstellen -->
        <symlink link="${linux-appimage-folder.usr.bin}/${app.name}" resource="../lib/${app.name}/bin/${app.name}"/>
        <chmod file="${linux-appimage-folder.usr.lib}/${app.name}/bin/${app.name}" perm="a+x"/>
        
        <!-- AppImage-Tool herunterladen -->
        <get src="${appimagetool.url}" dest="${temp.dir.linux-appimage}/"/>
        
        <!-- AppImage-Tool ausführen -->
        <chmod file="${temp.dir.linux-appimage}/appimagetool-x86_64.AppImage" perm="a+x"/>
        <exec executable="./appimagetool-x86_64.AppImage" dir="${temp.dir.linux-appimage}">
            <arg value="${app.name}.AppDir"/>
            <env key="ARCH" value="x86_64"/>
        </exec>
        
        <!-- AppImage in den Dist-Ordner kopieren -->
        <move file="${temp.dir.linux-appimage}/eLamX-x86_64.AppImage" tofile="${dist.dir}/eLamX-x86_64.AppImage"/>
    </target>
    
    <!-- Hilfstarget, um die linux.properties zu laden -->
    <target name="-linux-appimage-init">
        <property file="nbproject/linux.properties"/>
    </target>
    
    <target name="macos-zip" depends="-macos-init,-build-zip-with_jre">
    </target>
    
    <!-- Hilfstarget, um die macos.properties zu laden -->
    <target name="-macos-init">
        <property file="nbproject/macos.properties"/>
    </target>

    <!-- ZIP-Datei mit eLamX und eine Plattformspezifischen JRE erstellen -->
    <target name="-build-zip-with_jre" depends="build,build-launchers">
        <mkdir dir="${dist.dir}"/>
        <!-- pathfileset does not support 'prefix' and 'filemode' parameters,
        we have to copy them to temp location -->
        <tempfile property="temp.dir.nbexec" destdir="${suite.build.dir}" deleteonexit="true" prefix="nbexec"/>
        <tempfile property="temp.dir.rest" destdir="${suite.build.dir}" deleteonexit="delete" prefix="rest"/>
        <subant genericantfile="${harness.dir}/suite.xml" target="copy-cluster" inheritrefs="true">
            <property name="dest.dir" value="${temp.dir.rest}"/>
            <property name="nbexec.dir" value="${temp.dir.nbexec}"/>
            <property name="build.dir" value="${suite.build.dir}"/>
            <resources refid="zip.platform.clusters"/>
        </subant>
        
        <loadresource property="jlink-modules">
            <concat>
                <union>
                    <string>java.scripting,</string>
                    <string>java.desktop,</string>
                    <string>java.instrument,</string>
                    <string>java.logging,</string>
                    <string>java.naming,</string>
                    <string>jdk.localedata,</string>
                    <string>jdk.management,</string>
                    <!-- only to be able to debug the rcp app -->
                    <string>jdk.jdwp.agent,</string>
                </union>
            </concat>
        </loadresource>
        
        <loadresource property="jlink-locales">
            <concat>
                <union>
                    <string>en,</string>
                    <string>de,</string>
                </union>
            </concat>
        </loadresource>
        
        <echo level="info">Start creating JRE from ${java.home}/jmods</echo>

        <exec executable="${java.home}/bin/jlink${jlinkext}" failonerror="true">
            <env key="JAVA_HOME" path="${java.home}"/>
            <arg value="--strip-debug"/>
            <arg value="--no-header-files"/>
            <arg value="--no-man-pages"/>
            <arg value="--output"/>
            <arg value="${temp.dir.rest}/${elamxjdk.dir}"/>
            <arg value="--module-path"/>
            <arg value="${java.home}/jmods"/>
            <arg value="--add-modules"/>
            <arg value="${jlink-modules}"/>
            <arg value="--include-locales=${jlink-locales}"/>
        </exec>
        <echo level="info">Created JRE in ${temp.dir.rest}/${elamxjdk.dir}</echo>
        
        <available file="${temp.dir.rest}/${elamxjdk.dir}" property="elamxjre.exist"/>
        <replace if:set="elamxjre.exist"
                 file="${build.launcher.dir}/etc/${app.name}.conf"
                 value="jdkhome=${elamxjdk.dir}">
            <contains text="#jdkhome"/>
            <replacetoken><![CDATA[#jdkhome="/path/to/jdk"]]></replacetoken>
        </replace>
        
        <zip destfile="${dist.dir}/${app.name}_${elamxjdk.os}.zip">
            <zipfileset dir="${build.launcher.dir}/bin/" filemode="755" prefix="${app.name}/bin"/>
            <zipfileset dir="${build.launcher.dir}/etc/" prefix="${app.name}/etc"/>
            <zipfileset dir="${temp.dir.nbexec}" filemode="755" prefix="${app.name}"/>
            <zipfileset dir="${temp.dir.rest}" prefix="${app.name}" filemode="755">
                <include name="${elamxjdk.dir}/bin/*"/>
            </zipfileset>
            <zipfileset dir="${temp.dir.rest}" prefix="${app.name}">
                <include name="**"/>
                <exclude name="${elamxjdk.dir}/bin/*"/>
            </zipfileset>

            <!-- Yes, the doubled app.name is a bit ugly, but better than the alternative; cf. #66441: -->
            <zipfileset dir="${cluster}" prefix="${app.name}/${app.name}">
                <exclude name="config/Modules/*.xml_hidden"/>
            </zipfileset>
            
        </zip>
    </target>
    
</project>
