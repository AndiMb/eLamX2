/*
 *  This program developed in Java is based on the netbeans platform and is used
 *  to design and to analyse composite structures by means of analytical and 
 *  numerical methods.
 * 
 *  Further information can be found here:
 *  http://www.elamx.de
 *    
 *  Copyright (C) 2021 Technische Universität Dresden - Andreas Hauffe
 * 
 *  This file is part of eLamX².
 *
 *  eLamX² is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  eLamX² is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with eLamX².  If not, see <http://www.gnu.org/licenses/>.
 */
package de.elamx.materialdb;

import java.io.File;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;

final class MaterialsDBOptionsPanel extends javax.swing.JPanel implements DocumentListener {

    private final MaterialsDBOptionsPanelController controller;

    MaterialsDBOptionsPanel(MaterialsDBOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        filenameTextField.getDocument().addDocumentListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        useFileCheckBox = new javax.swing.JCheckBox();
        filenameTextField = new javax.swing.JTextField();
        openFileButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(useFileCheckBox, org.openide.util.NbBundle.getMessage(MaterialsDBOptionsPanel.class, "MaterialsDBOptionsPanel.useFileCheckBox.text")); // NOI18N
        useFileCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(MaterialsDBOptionsPanel.class, "MaterialsDBOptionsPanel.useFileCheckBox.toolTipText")); // NOI18N
        useFileCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useFileCheckBoxActionPerformed(evt);
            }
        });

        filenameTextField.setText(org.openide.util.NbBundle.getMessage(MaterialsDBOptionsPanel.class, "MaterialsDBOptionsPanel.filenameTextField.text")); // NOI18N

        openFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/elamx/materialdb/resources/fileopen.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(openFileButton, org.openide.util.NbBundle.getMessage(MaterialsDBOptionsPanel.class, "MaterialsDBOptionsPanel.openFileButton.text")); // NOI18N
        openFileButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(useFileCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filenameTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openFileButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(useFileCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(openFileButton)
                    .addComponent(filenameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void useFileCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useFileCheckBoxActionPerformed
        filenameTextField.setEnabled(useFileCheckBox.isSelected());
        openFileButton.setEnabled(useFileCheckBox.isSelected());
        controller.changed();
    }//GEN-LAST:event_useFileCheckBoxActionPerformed

    private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed
        File basePath = new File(System.getProperty("user.home"));
        File file = new FileChooserBuilder("materialdb-dir").setTitle(NbBundle.getMessage(MaterialsDBOptionsPanel.class, "OpenFileDialog.Title")).
                setDefaultWorkingDirectory(basePath).setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                String name = f.getName().toLowerCase();
                return name.endsWith(".elamx") || (f.isDirectory() && !f.isHidden());
            }

            @Override
            public String getDescription() {
                return NbBundle.getMessage(MaterialsDBOptionsPanel.class, "OpenFileDialog.Description");
            }
        }).setSelectionApprover(new FileChooserBuilder.SelectionApprover() {

            @Override
            public boolean approve(File[] selection) {
                if (selection.length > 1) {
                    return false;
                }
                return selection[0].getName().toLowerCase().endsWith(".elamx");
            }
        }).setApproveText(NbBundle.getMessage(MaterialsDBOptionsPanel.class, "OpenFileDialog.ApproveText")).setFileHiding(true).showOpenDialog();
        if (file != null) {
            filenameTextField.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_openFileButtonActionPerformed

    void load() {
        useFileCheckBox.setSelected(NbPreferences.forModule(MaterialsDBOptionsPanel.class).getBoolean("MaterialsDBOptions.useFile", false));
        openFileButton.setEnabled(useFileCheckBox.isSelected());
        filenameTextField.setEnabled(useFileCheckBox.isSelected());
        filenameTextField.setText(NbPreferences.forModule(MaterialsDBOptionsPanel.class).get("MaterialsDBOptions.path", ""));
    }

    void store() {
        NbPreferences.forModule(MaterialsDBOptionsPanel.class).putBoolean("MaterialsDBOptions.useFile", useFileCheckBox.isSelected());
        NbPreferences.forModule(MaterialsDBOptionsPanel.class).put("MaterialsDBOptions.path", filenameTextField.getText());
    }

    boolean valid() {
        File file = new File(filenameTextField.getText());
        return (!useFileCheckBox.isSelected() || file.exists() && file.isFile());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField filenameTextField;
    private javax.swing.JButton openFileButton;
    private javax.swing.JCheckBox useFileCheckBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent e) {
        controller.changed();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        controller.changed();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        controller.changed();
    }
}
