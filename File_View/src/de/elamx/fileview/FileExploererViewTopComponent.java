/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.elamx.fileview;

import de.elamx.fileview.nodefactories.eLamXNodeFactory;
import de.elamx.laminate.eLamXLookup;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.ActionMap;
import javax.swing.text.DefaultEditorKit;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.filesystems.FileObject;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.nodes.NodeEvent;
import org.openide.nodes.NodeListener;
import org.openide.nodes.NodeMemberEvent;
import org.openide.nodes.NodeReorderEvent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//de.elamx.fileview//FileExploererView//EN",
        autostore = false)
@TopComponent.Description(preferredID = "FileExploererViewTopComponent",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "de.elamx.fileview.FileExploererViewTopComponent")
@ActionReference(path = "Menu/Window", position = 100)
@TopComponent.OpenActionRegistration(displayName = "#CTL_FileExploererViewAction",
        preferredID = "FileExploererViewTopComponent")
public final class FileExploererViewTopComponent extends TopComponent implements ExplorerManager.Provider, PropertyChangeListener {

    private final ExplorerManager manager = new ExplorerManager();
    private AbstractNode rootNode;

    private static FileExploererViewTopComponent instance;

    public FileExploererViewTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(FileExploererViewTopComponent.class, "CTL_FileExploererViewTopComponent"));
        setToolTipText(NbBundle.getMessage(FileExploererViewTopComponent.class, "HINT_FileExploererViewTopComponent"));
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);

        ActionMap map = getActionMap();
        map.put(DefaultEditorKit.copyAction, ExplorerUtils.actionCopy(manager)); // currently unused
        map.put(DefaultEditorKit.cutAction, ExplorerUtils.actionCut(manager));
        map.put(DefaultEditorKit.pasteAction, ExplorerUtils.actionPaste(manager));

        associateLookup(ExplorerUtils.createLookup(manager, getActionMap()));
        initTree();
        beanTreeView1.setRootVisible(false);
        eLamXLookup.getDefault().addPropertyChangeListener(this);
        instance = this;
    }

    public static FileExploererViewTopComponent getInstance() {
        return instance;
    }

    private void initTree() {
        rootNode = new AbstractNode(Children.create(new eLamXNodeFactory(), true));
        rootNode.addNodeListener(new MainNodeExpander());
        rootNode.setIconBaseWithExtension("de/elamx/fileview/resources/eLamX-File-Logo.png");
        manager.setRootContext(rootNode);
    }

    public void expandNode(Node n) {
        beanTreeView1.expandNode(n);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        beanTreeView1 = new org.openide.explorer.view.BeanTreeView();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(beanTreeView1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(beanTreeView1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.view.BeanTreeView beanTreeView1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return manager;
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals(eLamXLookup.PROP_FILEOBJECT)) {
            FileObject fo = eLamXLookup.getDefault().getFileObject();
            if (fo != null) {
                rootNode.setDisplayName(fo.getNameExt());
                beanTreeView1.setRootVisible(true);
            } else {
                beanTreeView1.setRootVisible(false);
            }
        }
    }

    private class MainNodeExpander implements NodeListener {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
        }

        @Override
        public void childrenAdded(NodeMemberEvent ev) {
            if (rootNode == null) {
                return;
            }
            for (Node n : rootNode.getChildren().getNodes()) {
                beanTreeView1.expandNode(n);
            }
        }

        @Override
        public void childrenRemoved(NodeMemberEvent ev) {
        }

        @Override
        public void childrenReordered(NodeReorderEvent ev) {
        }

        @Override
        public void nodeDestroyed(NodeEvent ev) {
        }

    }
}
