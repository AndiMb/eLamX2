/*
 *  This program developed in Java is based on the netbeans platform and is used
 *  to design and to analyse composite structures by means of analytical and 
 *  numerical methods.
 * 
 *  Further information can be found here:
 *  http://www.elamx.de
 *    
 *  Copyright (C) 2021 Technische Universität Dresden - Andreas Hauffe
 * 
 *  This file is part of eLamX².
 *
 *  eLamX² is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  eLamX² is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with eLamX².  If not, see <http://www.gnu.org/licenses/>.
 */
package de.elamx.clt.plateui.stiffenerui;

import de.elamx.clt.plate.Input;
import de.elamx.clt.plate.Stiffener.Properties.StiffenerProperties;
import de.elamx.clt.plateui.stiffenerui.wizard.StiffenerPropertiesWizardIterator;
import java.awt.Component;
import java.beans.PropertyVetoException;
import java.text.MessageFormat;
import javax.swing.ActionMap;
import javax.swing.JPopupMenu;
import org.netbeans.swing.outline.DefaultOutlineModel;
import org.openide.DialogDisplayer;
import org.openide.WizardDescriptor;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.NodePopupFactory;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;

/**
 *
 * @author Andreas Hauffe
 */
public class StiffenerPanel extends javax.swing.JPanel implements ExplorerManager.Provider, Lookup.Provider {

    private final ExplorerManager explorerManager = new ExplorerManager();
    private final Input input;
    private final Lookup lookup;

    public StiffenerPanel() {
        this(null);
    }

    /**
     * Creates new form StiffenerPanel
     *
     * @param input
     */
    public StiffenerPanel(Input input) {
        this.input = input;
        lookup = ExplorerUtils.createLookup(explorerManager, new ActionMap());
        initComponents();
        initView();
    }

    private void initView() {
        outlineView.setPropertyColumns(StiffenerProperties.PROP_POSITION, NbBundle.getMessage(StiffenerPanel.class, "StiffenerDefinitionNode.Position"),
                StiffenerProperties.PROP_DIRECTION, NbBundle.getMessage(StiffenerPanel.class, "StiffenerDefinitionNode.Direction"));
        ((DefaultOutlineModel) outlineView.getOutline().getModel()).setNodesColumnLabel(NbBundle.getMessage(StiffenerPanel.class, "StiffenerDefinitionNode.Name"));
        outlineView.getOutline().setRootVisible(false);
        NodePopupFactory npf = new NodePopupFactory() {
            @Override
            public JPopupMenu createPopupMenu(int row, int column, Node[] selectedNodes, Component component) {
                return super.createPopupMenu(row, column, selectedNodes, component);
            }
        };
        outlineView.setNodePopupFactory(npf);
        outlineView.getNodePopupFactory().setShowQuickFilter(false);
        if (input != null) {
            explorerManager.setRootContext(new StiffenersNode(input));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        outlineView = new org.openide.explorer.view.OutlineView();
        jButton1 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(100, 100));
        setLayout(new java.awt.BorderLayout());

        outlineView.setPreferredSize(new java.awt.Dimension(50, 50));
        add(outlineView, java.awt.BorderLayout.CENTER);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(StiffenerPanel.class, "StiffenerPanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //input.addStiffenerProperty(new DefaultStiffenerProperties("Test", StiffenerProperties.X_DIRECTION, 250.0, 90000.0, 45000.0, 37000.0, 240.0, 0.0, 100.0));
        WizardDescriptor wiz = new WizardDescriptor(new StiffenerPropertiesWizardIterator());
        // {0} will be replaced by WizardDescriptor.Panel.getComponent().getName()
        // {1} will be replaced by WizardDescriptor.Iterator.name()
        wiz.setTitleFormat(new MessageFormat("{0} ({1})"));
        wiz.setTitle(NbBundle.getMessage(StiffenerPanel.class, "StiffenerWizard.title"));
        if (DialogDisplayer.getDefault().notify(wiz) == WizardDescriptor.FINISH_OPTION) {
            StiffenerDefinitionService stiffener = (StiffenerDefinitionService) wiz.getProperty("stiffener");
            if (stiffener != null) {
                input.addStiffenerProperty(stiffener);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private org.openide.explorer.view.OutlineView outlineView;
    // End of variables declaration//GEN-END:variables

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    @Override
    public Lookup getLookup() {
        return lookup;
    }

    @Override
    public void setVisible(boolean aFlag) {
        super.setVisible(aFlag);
        try {
            explorerManager.setSelectedNodes(new Node[0]);
        } catch (PropertyVetoException ex) {
            Exceptions.printStackTrace(ex);
        }
    }
    
    @Override
    public void addNotify() {
        super.addNotify();
        ExplorerUtils.activateActions(explorerManager, true);
    }

    @Override
    public void removeNotify() {
        ExplorerUtils.activateActions(explorerManager, false);
        super.removeNotify();
    }
}
