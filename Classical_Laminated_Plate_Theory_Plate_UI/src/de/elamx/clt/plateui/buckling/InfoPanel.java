/*
 *  This program developed in Java is based on the netbeans platform and is used
 *  to design and to analyse composite structures by means of analytical and 
 *  numerical methods.
 * 
 *  Further information can be found here:
 *  http://www.elamx.de
 *    
 *  Copyright (C) 2021 Technische Universität Dresden - Andreas Hauffe
 * 
 *  This file is part of eLamX².
 *
 *  eLamX² is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  eLamX² is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with eLamX².  If not, see <http://www.gnu.org/licenses/>.
 */
package de.elamx.clt.plateui.buckling;

import de.elamx.clt.CLTRefreshListener;
import de.elamx.clt.CLT_Laminate;
import de.elamx.core.GlobalProperties;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.DecimalFormat;

/**
 *
 * @author Florian Dexl
 */
public class InfoPanel extends javax.swing.JPanel implements PropertyChangeListener, CLTRefreshListener {

    private final BucklingModuleData data;
    private CLT_Laminate clt_lam;
    private final static DecimalFormat DF = GlobalProperties.getDefault().getFormat(GlobalProperties.FORMAT_NONDIMDMATPARAM);

    public InfoPanel() {
        this(null);
    }

    /**
     * Creates new form ResultPanel
     */
    public InfoPanel(BucklingModuleData data) {
        this.data = data;
        if (data != null) {
            clt_lam = data.getLaminat().getLookup().lookup(CLT_Laminate.class);
            if (clt_lam == null) {
                clt_lam = new CLT_Laminate(data.getLaminat());
            }
            this.data.getBucklingInput().addPropertyChangeListener(this);
            clt_lam.addCLTRefreshListener(this);
        }
        initComponents();
        refresh();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        alphabarLabel = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(InfoPanel.class, "InfoPanel.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(InfoPanel.class, "InfoPanel.jLabel2.text")); // NOI18N
        jLabel2.setToolTipText(org.openide.util.NbBundle.getMessage(InfoPanel.class, "InfoPanel.alphabarLabel.toolTipText")); // NOI18N

        alphabarLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(alphabarLabel, org.openide.util.NbBundle.getMessage(InfoPanel.class, "InfoPanel.alphabarLabel.text")); // NOI18N
        alphabarLabel.setToolTipText(org.openide.util.NbBundle.getMessage(InfoPanel.class, "InfoPanel.alphabarLabel.toolTipText")); // NOI18N
        alphabarLabel.setText(DF.format(0.0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(alphabarLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alphabarLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(InfoPanel.class, "InfoPanel.jLabel2.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alphabarLabel;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        refresh();
    }

    private void refresh() {
        if (data == null) {
            return;
        }
        // Effective aspect ratio
        Double alphaBar;
        if (data.getBucklingInput().getStiffenerProperties().isEmpty()) {
            double D11 = clt_lam.getDMatrix()[0][0];
            double D22 = clt_lam.getDMatrix()[1][1];
            alphaBar = data.getBucklingInput().getLength()/data.getBucklingInput().getWidth()*Math.pow((D22/D11),0.25);
            alphabarLabel.setText(DF.format(alphaBar));
        } else {
            alphabarLabel.setText("<html>\u2015</html>");
        }
    }

    public void cleanup() {
        if (data != null) {
            this.data.removePropertyChangeListener(BucklingModuleData.PROP_RESULT, this);
        }
    }

    @Override
    public void refreshed() {
        refresh();
    }
}
