/*
 *  This program developed in Java is based on the netbeans platform and is used
 *  to design and to analyse composite structures by means of analytical and 
 *  numerical methods.
 * 
 *  Further information can be found here:
 *  http://www.elamx.de
 *    
 *  Copyright (C) 2021 Technische Universität Dresden - Andreas Hauffe
 * 
 *  This file is part of eLamX².
 *
 *  eLamX² is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  eLamX² is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with eLamX².  If not, see <http://www.gnu.org/licenses/>.
 */
package de.elamx.clt.plateui.vibration;

import com.ardor3d.scenegraph.Mesh;
import com.ardor3d.scenegraph.Node;
import de.elamx.clt.plate.VibrationInput;
import de.elamx.clt.plate.VibrationResult;
import de.elamx.clt.plate.view3d.VibrationPlate;
import de.elamx.core.GlobalProperties;
import de.view3d.View3D;
import de.view3d.View3DProperties;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.border.Border;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;

/**
 *
 * @author raedel
 */
public class ResultPanel extends javax.swing.JPanel implements PropertyChangeListener {
    
    private final VibrationModuleData data;
    private final View3D view3D;
    private final static DecimalFormat df = GlobalProperties.getDefault().getFormat(GlobalProperties.FORMAT_FREQUENCY);
    private VibrationPlate plate;
    
    public ResultPanel() {
        this(null, null);
    }

    /**
     * Creates new form ResultPanel
     */
    @SuppressWarnings("this-escape")
    public ResultPanel(VibrationModuleData data, View3D view3D) {
        this.data = data;
        this.view3D = view3D;
        if (view3D != null) {
            this.view3D.addAdditionalButtonBar(getToolBar());
        }
        if (data != null) {
            this.data.addPropertyChangeListener(VibrationModuleData.PROP_RESULT, this);
        }
        View3DProperties.getDefault().addPropertyChangeListener(this);
        initComponents();
    }
    
    private JToolBar getToolBar() {
        JToolBar bar = new JToolBar();
        
        final JToggleButton legendButton = new JToggleButton();
        legendButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        legendButton.setIcon(ImageUtilities.loadImageIcon("de/elamx/clt/plateui/resources/legend24.png", false));
        legendButton.setToolTipText(NbBundle.getMessage(ResultPanel.class, "legendButton.tip"));
        legendButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ResultPanel.this.view3D.setShowHud(legendButton.isSelected());
                NbPreferences.forModule(ResultPanel.class).putBoolean("Vibration.ResultPanel.legendButton.selected", legendButton.isSelected());
            }
        });
        legendButton.setSelected(NbPreferences.forModule(ResultPanel.class).getBoolean("Vibration.ResultPanel.legendButton.selected", true));
        this.view3D.setShowHud(legendButton.isSelected());
        
        bar.add(legendButton);
        
        return bar;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        eigenvalueComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        zScaleSpinner = new javax.swing.JSpinner();
        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ResultPanel.class, "ResultPanel.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ResultPanel.class, "ResultPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ResultPanel.class, "ResultPanel.jLabel2.text")); // NOI18N

        fLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(fLabel, org.openide.util.NbBundle.getMessage(ResultPanel.class, "ResultPanel.fLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ResultPanel.class, "ResultPanel.jLabel3.text")); // NOI18N

        eigenvalueComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eigenvalueComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setText(org.openide.util.NbBundle.getMessage(ResultPanel.class, "ResultPanel.jLabel4.text")); // NOI18N

        zScaleSpinner.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.1d, 50.0d, 0.1d));
        JSpinner.NumberEditor editor = new JSpinner.NumberEditor(zScaleSpinner);
        DecimalFormat format = editor.getFormat();
        format.setDecimalFormatSymbols(new DecimalFormatSymbols(GlobalProperties.getDefault().getActualLocale()));
        zScaleSpinner.setEditor(editor);
        zScaleSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zScaleSpinnerStateChanged(evt);
            }
        });

        playButton.setText(org.openide.util.NbBundle.getMessage(ResultPanel.class, "PlayButton.text")); // NOI18N
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        stopButton.setText(org.openide.util.NbBundle.getMessage(ResultPanel.class, "StopButton.text")); // NOI18N
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eigenvalueComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(zScaleSpinner)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(playButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eigenvalueComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(zScaleSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(stopButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void eigenvalueComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eigenvalueComboBoxActionPerformed
        updateView3D(false);
    }//GEN-LAST:event_eigenvalueComboBoxActionPerformed

    private void zScaleSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zScaleSpinnerStateChanged
        if (timer == null) {
            view3D.setZScale(((Number) zScaleSpinner.getValue()).doubleValue());
        } else {
            if (videoTask != null){
                videoTask.setMaxScale(((Number) zScaleSpinner.getValue()).doubleValue());
            }
        }
    }//GEN-LAST:event_zScaleSpinnerStateChanged
    
    private Timer timer;
    private VideoTask videoTask;

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        if (timer == null) {
            timer = new Timer(true);
            videoTask = new VideoTask(((Number) zScaleSpinner.getValue()).doubleValue());
            timer.scheduleAtFixedRate(videoTask, 0, 100);
        }
    }//GEN-LAST:event_playButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        stopTimer();
    }//GEN-LAST:event_stopButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> eigenvalueComboBox;
    private javax.swing.JLabel fLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton playButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JSpinner zScaleSpinner;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (data == null) {
            return;
        }
        VibrationResult result = data.getResult();
        if (result == null) {
        } else {
            if (!evt.getPropertyName().equals(View3DProperties.PROP_NETQUALITY)) {
                fLabel.setText(df.format(result.getf_crit()));
                DefaultComboBoxModel<String> cModel = new DefaultComboBoxModel<>();
                double[] eigenvalues = result.getFrequencies();
                for (int ii = 0; ii < eigenvalues.length; ii++) {
                    cModel.addElement("" + (ii + 1) + ". " + df.format(eigenvalues[ii]));
                }
                eigenvalueComboBox.setModel(cModel);
                plate = new VibrationPlate((VibrationInput)data.getResult().getInput(), data.getResult());
            }
            updateView3D(true);
        }
    }
    
    @Override
    public void setVisible(boolean aFlag) {
        super.setVisible(aFlag); //To change body of generated methods, choose Tools | Templates.
        if (!aFlag) {
            stopTimer();
        }
    }
    
    private void updateView3D(boolean reinit) {
        if (plate == null || view3D == null || data == null || data.getResult() == null) {
            return;
        }
        plate.setEigenvectorNumber(eigenvalueComboBox.getSelectedIndex());
        List<Mesh> shapes = plate.getShapes(reinit);
        view3D.setShape3D(shapes, 1.0);
        Node group = new Node();
        for (Node g : plate.getUndeformedWithBC()) {
            group.attachChild(g);
        }
        
        VibrationInput input = (VibrationInput)data.getResult().getInput();
        
        String[] boundary_cond = new String[]{"SS", "CC", "CF", "FF", "SC", "SF"};
        
        JLabel l = new JLabel("<html><b>" + NbBundle.getMessage(ResultPanel.class, "CTL_VibrationTopComponent") + "</b><br>"
                + NbBundle.getMessage(ResultPanel.class, "InputPanel.jLabel1.text").replaceAll("<html>", "").replaceAll("</html>", "") + " " + GlobalProperties.getDefault().getFormat(GlobalProperties.FORMAT_THICKNESS).format(input.getLength()) + "<br>"
                + NbBundle.getMessage(ResultPanel.class, "InputPanel.jLabel2.text").replaceAll("<html>", "").replaceAll("</html>", "") + " " + GlobalProperties.getDefault().getFormat(GlobalProperties.FORMAT_THICKNESS).format(input.getWidth()) + "<br>"
                + NbBundle.getMessage(ResultPanel.class, "InputPanel.jLabel3.text").replaceAll("<html>", "").replaceAll("</html>", "") + " " + boundary_cond[input.getBcx()] + "<br>"
                + NbBundle.getMessage(ResultPanel.class, "InputPanel.jLabel4.text").replaceAll("<html>", "").replaceAll("</html>", "") + " " + boundary_cond[input.getBcy()] + "<br>"
                + NbBundle.getMessage(ResultPanel.class, "InputPanel.jLabel5.text").replaceAll("<html>", "").replaceAll("</html>", "") + " " + input.getM() + "<br>"
                + NbBundle.getMessage(ResultPanel.class, "ResultPanel.jLabel3.text").replaceAll("<html>", "").replaceAll("</html>", "") + " " + df.format(data.getResult().getFrequencies()[eigenvalueComboBox.getSelectedIndex()]) + "<br>"
                + "</html>");
        l.setFont(jLabel1.getFont());
        //Border used as padding 
        Border paddingBorder = BorderFactory.createEmptyBorder(10, 10, 10, 10);
        l.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(Color.BLACK), paddingBorder));
        l.setSize(l.getPreferredSize());
        
        BufferedImage img = new BufferedImage(
                l.getWidth(),
                l.getHeight(),
                BufferedImage.TYPE_INT_ARGB);
        l.paint(img.getGraphics());
        
        view3D.setHUDImage(img);
    }
    
    public void cleanup() {
        if (data != null) {
            this.data.removePropertyChangeListener(VibrationModuleData.PROP_RESULT, this);
        }
        View3DProperties.getDefault().removePropertyChangeListener(this);
    }
    
    private void stopTimer() {
        if (timer != null) {
            timer.cancel();
            timer = null;
            videoTask = null;
            view3D.setZScale(((Number) zScaleSpinner.getValue()).doubleValue());
        }
    }
    
    private class VideoTask extends TimerTask {
        
        private double maxScale = 1.0;
        private double delta = -0.2;
        private double value = 1.0;
        
        public VideoTask(double maxScale) {
            this.maxScale = maxScale;
            this.value = 1.0;
        }
        
        public void setMaxScale(double maxScale) {
            this.maxScale = maxScale;
        }
        
        @Override
        public void run() {
            EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    if (!ResultPanel.this.isShowing()){
                        stopTimer();
                    }else{
                        view3D.setZScale(maxScale * Math.sin(value*Math.PI/2.0));
                        value += delta;
                        if ((value >= 1.0 && delta > 0.0) || (value <= -1.0 && delta < 0.0)) {
                            delta = -delta;
                        }
                    }
                }
            });
        }
    }
}
