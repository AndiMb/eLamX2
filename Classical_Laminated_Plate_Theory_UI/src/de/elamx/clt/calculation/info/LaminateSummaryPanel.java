/*
 *  This program developed in Java is based on the netbeans platform and is used
 *  to design and to analyse composite structures by means of analytical and 
 *  numerical methods.
 * 
 *  Further information can be found here:
 *  http://www.elamx.de
 *    
 *  Copyright (C) 2021 Technische Universität Dresden - Andreas Hauffe
 * 
 *  This file is part of eLamX².
 *
 *  eLamX² is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  eLamX² is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with eLamX².  If not, see <http://www.gnu.org/licenses/>.
 */
package de.elamx.clt.calculation.info;

import de.elamx.core.GlobalProperties;
import de.elamx.laminate.Laminat;
import de.elamx.utilities.AutoRowHeightTable;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.text.NumberFormat;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author raedel
 */
public class LaminateSummaryPanel extends javax.swing.JPanel {
    
    private LaminateSummaryTableModel lamsumModel_ = new LaminateSummaryTableModel();

    /**
     * Creates new customizer LaminateSummaryPanel
     */
    public LaminateSummaryPanel() {
        initComponents();
    }
    
    public void setValues(Laminat laminate){
        lamsumModel_.setValues(laminate.getLaminateSummary());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new AutoRowHeightTable(){

            @Override
            public Dimension getPreferredScrollableViewportSize() {
                Dimension dim = super.getPreferredScrollableViewportSize();
                // here we return the pref height
                dim.height = getPreferredSize().height;
                return dim;
            }
        };
        ObjectRenderer or = new ObjectRenderer();
        or.setHorizontalAlignment(JLabel.RIGHT);
        jTable1.setDefaultRenderer(Object.class, or);
        jTable1.setDefaultRenderer(Number.class, new NumberRenderer());
        jTable1.setDefaultRenderer(Double.class, new DoubleRenderer());

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(LaminateSummaryPanel.class, "LaminateSummaryPanel.border.title")))); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(32767, 150));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(453, 150));

        jTable1.setModel(lamsumModel_);
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Default Renderers
     **/
    class NumberRenderer extends ObjectRenderer {
	public NumberRenderer() {
	    super();
	    setHorizontalAlignment(JLabel.RIGHT);
	}
    }

    class DoubleRenderer extends NumberRenderer {
	NumberFormat formatter;
	public DoubleRenderer() { super(); }

        @Override
	public void setValue(Object value) {
	    if (formatter == null) {
		formatter = GlobalProperties.getDefault().getFormat(GlobalProperties.FORMAT_DOUBLE);
	    }
	    setText((value == null) ? "" : formatter.format(value));
	}
    }

    class ObjectRenderer extends DefaultTableCellRenderer.UIResource {boolean isSelected = false;
        boolean isFailed = false;
        int index = 0;
        Color bgColor[] = new Color[]{new Color(255, 255, 255, 255), new Color(240, 240, 240, 255)};
        Color selectionColor[] = new Color[2];

        {
            // we'll use a translucent version of the table's default
            // selection color to paint selections
            Color oldCol = jTable1.getSelectionBackground();
            selectionColor[0] = new Color(oldCol.getRed(), oldCol.getGreen(), oldCol.getBlue(), 255);
            selectionColor[1] = new Color(oldCol.getRed() < 15 ? oldCol.getRed()+15 : oldCol.getRed()-15, 
                                          oldCol.getGreen() < 15 ? oldCol.getGreen()+15 : oldCol.getGreen()-15, 
                                          oldCol.getBlue() < 15 ? oldCol.getBlue()+15 : oldCol.getBlue()-15,
                                          255);
            // need to be non-opaque since we'll be translucent
            setOpaque(false);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            // save the selected state since we'll need it when painting
            this.isSelected = isSelected;
            this.index = row%2;
            return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        }

        // since DefaultTableCellRenderer is really just a JLabel, we can override
        // paintComponent to paint the translucent selection when necessary
        @Override
        public void paintComponent(Graphics g) {
            if   (isSelected) {g.setColor(selectionColor[index]);}
            else              {g.setColor(bgColor[index]);}
            g.fillRect(0, 0, getWidth(), getHeight());
            super.paintComponent(g);
        }
    };
    
}
