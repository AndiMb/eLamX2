/*
 *  This program developed in Java is based on the netbeans platform and is used
 *  to design and to analyse composite structures by means of analytical and 
 *  numerical methods.
 * 
 *  Further information can be found here:
 *  http://www.elamx.de
 *    
 *  Copyright (C) 2021 Technische Universität Dresden - Andreas Hauffe
 * 
 *  This file is part of eLamX².
 *
 *  eLamX² is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  eLamX² is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with eLamX².  If not, see <http://www.gnu.org/licenses/>.
 */
package de.elamx.clt.cutoutui;

import de.elamx.clt.cutout.CutoutGeometry;
import de.elamx.clt.cutout.CutoutInput;
import de.elamx.core.GlobalProperties;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.DecimalFormat;
import java.util.Collection;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.text.NumberFormatter;
import org.openide.nodes.Node;
import org.openide.util.Lookup;

/**
 *
 * @author raedel
 */
public class InputPanel  extends javax.swing.JPanel implements ItemListener, PropertyChangeListener, ChangeListener {
    
    private static final DecimalFormat forceFormat = GlobalProperties.getDefault().getFormat(GlobalProperties.FORMAT_FORCE);
    
    private static String[] holetypes;
    
    private final CutoutInput input;
    private CutoutGeometry[] cutoutGeometries;
    
    public InputPanel() {
        this(null);
    }
    
    /**
     * Creates new customizer InputPanel
     */
    @SuppressWarnings("this-escape")
    public InputPanel(CutoutModuleData data) {
        Collection<? extends CutoutGeometry> c = Lookup.getDefault().lookupAll(CutoutGeometry.class);
        cutoutGeometries = new CutoutGeometry[c.size()];
        holetypes = new String[cutoutGeometries.length];
        int ii = 0;
        for (CutoutGeometry cg : c) {
            cutoutGeometries[ii] = cg;
            holetypes[ii] = cg.getDisplayName();
            ii++;
        }
        initComponents();
        
        input   = data != null ? data.getCutoutInput() : new CutoutInput();
        
        // CutoutGeometry in das PropertySheet einfügen
        propertySheet1.setNodes(new Node[]{new CutoutGeometryDefinitionServiceNode(input.getCutoutGeometry())});
        holeTypeCombo.setSelectedItem(input.getCutoutGeometry().getDisplayName());
        holeTypeCombo.addItemListener(this);
        
        // loads
        nxxField.setValue(input.getNXX());
        nyyField.setValue(input.getNYY());
        nxyField.setValue(input.getNXY());
        mxxField.setValue(input.getMXX());
        myyField.setValue(input.getMYY());
        mxyField.setValue(input.getMXY());
        
        nxxField.addPropertyChangeListener("value", this);
        nyyField.addPropertyChangeListener("value", this);
        nxyField.addPropertyChangeListener("value", this);
        mxxField.addPropertyChangeListener("value", this);
        myyField.addPropertyChangeListener("value", this);
        mxyField.addPropertyChangeListener("value", this);
        
        // accuracy
        accuracySlider.setValue((int)(Math.log((input.getValues()-1)/45)/Math.log(2.0)));
        accuracySlider.addChangeListener(this);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        holeTypeLabel = new javax.swing.JLabel();
        holeTypeCombo = new javax.swing.JComboBox<String>();
        nxxLabel = new javax.swing.JLabel();
        nyyLabel = new javax.swing.JLabel();
        nxyLabel = new javax.swing.JLabel();
        nxxField = new javax.swing.JFormattedTextField();
        nyyField = new javax.swing.JFormattedTextField();
        nxyField = new javax.swing.JFormattedTextField();
        mxyField = new javax.swing.JFormattedTextField();
        myyField = new javax.swing.JFormattedTextField();
        mxxField = new javax.swing.JFormattedTextField();
        mxxLabel = new javax.swing.JLabel();
        myyLabel = new javax.swing.JLabel();
        mxyLabel = new javax.swing.JLabel();
        propertySheet1 = new org.openide.explorer.propertysheet.PropertySheet();
        accuracyLabel = new javax.swing.JLabel();
        accuracySlider = new javax.swing.JSlider();

        setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.border.title"))); // NOI18N

        holeTypeLabel.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.holeTypeLabel.text")); // NOI18N

        holeTypeCombo.setModel(new DefaultComboBoxModel<String>(holetypes));

        nxxLabel.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.nxxLabel.text")); // NOI18N

        nyyLabel.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.nyyLabel.text")); // NOI18N

        nxyLabel.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.nxyLabel.text")); // NOI18N

        nxxField.setColumns(8);
        nxxField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new NumberFormatter(forceFormat)));
        nxxField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nxxField.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.nxxField.text")); // NOI18N

        nyyField.setColumns(8);
        nyyField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new NumberFormatter(forceFormat)));
        nyyField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nyyField.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.nyyField.text")); // NOI18N

        nxyField.setColumns(8);
        nxyField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new NumberFormatter(forceFormat)));
        nxyField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nxyField.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.nxyField.text")); // NOI18N

        mxyField.setColumns(8);
        mxyField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new NumberFormatter(forceFormat)));
        mxyField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        mxyField.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.mxyField.text")); // NOI18N

        myyField.setColumns(8);
        myyField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new NumberFormatter(forceFormat)));
        myyField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        myyField.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.myyField.text")); // NOI18N

        mxxField.setColumns(8);
        mxxField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new NumberFormatter(forceFormat)));
        mxxField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        mxxField.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.mxxField.text")); // NOI18N

        mxxLabel.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.mxxLabel.text")); // NOI18N

        myyLabel.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.myyLabel.text")); // NOI18N

        mxyLabel.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.mxyLabel.text")); // NOI18N

        propertySheet1.setDescriptionAreaVisible(false);

        accuracyLabel.setText(org.openide.util.NbBundle.getMessage(InputPanel.class, "InputPanel.accuracyLabel.text")); // NOI18N

        accuracySlider.setMaximum(8);
        accuracySlider.setMinimum(2);
        accuracySlider.setValue(4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(propertySheet1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(holeTypeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(holeTypeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(accuracyLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(myyLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mxxLabel))
                                .addGap(6, 6, 6))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(mxyLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(accuracySlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(mxxField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mxyField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(myyField, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nxxLabel)
                            .addComponent(nyyLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nxyLabel, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nyyField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nxyField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nxxField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(holeTypeLabel)
                    .addComponent(holeTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(propertySheet1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nxxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nxxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nyyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nyyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nxyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nxyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mxxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mxxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(myyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(myyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mxyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mxyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(accuracyLabel)
                    .addComponent(accuracySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accuracyLabel;
    private javax.swing.JSlider accuracySlider;
    private javax.swing.JComboBox<String> holeTypeCombo;
    private javax.swing.JLabel holeTypeLabel;
    private javax.swing.JFormattedTextField mxxField;
    private javax.swing.JLabel mxxLabel;
    private javax.swing.JFormattedTextField mxyField;
    private javax.swing.JLabel mxyLabel;
    private javax.swing.JFormattedTextField myyField;
    private javax.swing.JLabel myyLabel;
    private javax.swing.JFormattedTextField nxxField;
    private javax.swing.JLabel nxxLabel;
    private javax.swing.JFormattedTextField nxyField;
    private javax.swing.JLabel nxyLabel;
    private javax.swing.JFormattedTextField nyyField;
    private javax.swing.JLabel nyyLabel;
    private org.openide.explorer.propertysheet.PropertySheet propertySheet1;
    // End of variables declaration//GEN-END:variables


    @Override
    public void itemStateChanged(ItemEvent evt) {
        Object o = evt.getSource();
        if (o == holeTypeCombo) {modifiyCutoutInput();}
    }
    
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        Object o = evt.getSource();
        if      (o == nxxField) {input.setNXX(((Number) nxxField.getValue()).doubleValue());}
        else if (o == nyyField) {input.setNYY(((Number) nyyField.getValue()).doubleValue());}
        else if (o == nxyField) {input.setNXY(((Number) nxyField.getValue()).doubleValue());}
        else if (o == mxxField) {input.setMXX(((Number) mxxField.getValue()).doubleValue());}
        else if (o == myyField) {input.setMYY(((Number) myyField.getValue()).doubleValue());}
        else if (o == mxyField) {input.setMXY(((Number) mxyField.getValue()).doubleValue());}
    }

    @Override
    public void stateChanged(ChangeEvent evt) {
        Object o = evt.getSource();
        if      (o == accuracySlider) {input.setValues(((int)(Math.pow(2,accuracySlider.getValue()))*45+1));}
    }
    
    private void modifiyCutoutInput(){
        for (CutoutGeometry cg : cutoutGeometries){
            if (holeTypeCombo.getSelectedItem().equals(cg.getDisplayName())){
                propertySheet1.setNodes(new Node[]{new CutoutGeometryDefinitionServiceNode(cg)});
                input.setCutoutGeometry(cg);
                break;
            }
        }
    }
}
